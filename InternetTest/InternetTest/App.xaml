<Application x:Class="InternetTest.App"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:local="clr-namespace:InternetTest"
			 xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
			 Startup="Application_Startup" Exit="Application_Exit"> 
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/Themes/Light.xaml"/>
			</ResourceDictionary.MergedDictionaries>
			<Style x:Key="PrimaryButton" TargetType="{x:Type Button}">
				<Setter Property="Cursor" Value="Hand"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5">
								<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource AccentColor}}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>

								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource AccentColor}}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="border" Value="Transparent"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding Source={StaticResource Gray}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="StandardButton" TargetType="{x:Type Button}">
				<Setter Property="Cursor" Value="Hand"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5">
								<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource Background1}}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
									
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="border" Value="Transparent"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="border" Value="Transparent"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding Source={StaticResource Gray}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="DefaultButton" TargetType="{x:Type Button}">
				<Setter Property="Cursor" Value="Hand"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5">
								<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource LightAccentColor}}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{Binding Source={StaticResource LightAccentColor}}"/>
									<!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>-->
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource LightAccentColor}}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{Binding Source={StaticResource LightAccentColor}}"/>
									<!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>-->
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="border" Value="Transparent"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding Source={StaticResource Gray}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ToolButton" TargetType="{x:Type Button}">
				<Setter Property="Cursor" Value="Hand"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5">
								<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource Background2}}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{Binding Source={StaticResource Background2}}"/>
									<!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>-->
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="border" Value="{Binding Source={StaticResource Background2}}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{Binding Source={StaticResource Background2}}"/>
									<!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>-->
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="border" Value="Transparent"/>
									<Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding Source={StaticResource Gray}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="Focusable" Value="false"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="VerticalThumb" TargetType="{x:Type Thumb}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition Height="4" />
									<RowDefinition Height="4" />
									<RowDefinition />
									<RowDefinition Height="4" />
									<RowDefinition Height="4" />
								</Grid.RowDefinitions>
								<Ellipse Grid.Row="0" Grid.RowSpan="2" Fill="{Binding Source={StaticResource Gray}}" />
								<Rectangle Grid.Row="1" Grid.RowSpan="3" Fill="{Binding Source={StaticResource Gray}}" />
								<Ellipse Grid.Row="3" Grid.RowSpan="2" Fill="{Binding Source={StaticResource Gray}}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollViewer}">
							<Grid x:Name="Grid" Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
								<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanHorizontallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" CanVerticallyScroll="False" Grid.Column="0" Content="{TemplateBinding Content}" CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
								<ScrollBar Style="{DynamicResource ViewerSrollBar}" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
								<ScrollBar Style="{DynamicResource ViewerSrollBar}" x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="ViewerSrollBar" TargetType="{x:Type ScrollBar}">
				<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="Width" Value="10"/>
				<Setter Property="MinWidth" Value="10"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="Bg" SnapsToDevicePixels="true" Background="Transparent">
								<Grid.RowDefinitions>
									<RowDefinition Height="0.00001*"/>
								</Grid.RowDefinitions>
								<Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarPageButton}"/>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarPageButton}"/>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{DynamicResource VerticalThumb}" theme:ScrollChrome.ScrollGlyph="VerticalGripper" Width="8"/>
									</Track.Thumb>
								</Track>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="Orientation" Value="Horizontal">
						<Setter Property="Width" Value="Auto"/>
						<Setter Property="MinWidth" Value="0"/>
						<Setter Property="Height" Value="10"/>
						<Setter Property="MinHeight" Value="10"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ScrollBar}">
									<Grid x:Name="Bg" SnapsToDevicePixels="true" Background="Transparent">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="0.00001*"/>
										</Grid.ColumnDefinitions>
										<Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
											<Track.DecreaseRepeatButton>
												<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarPageButton}"/>
											</Track.DecreaseRepeatButton>
											<Track.IncreaseRepeatButton>
												<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarPageButton}"/>
											</Track.IncreaseRepeatButton>
											<Track.Thumb>
												<Thumb theme:ScrollChrome.ScrollGlyph="HorizontalGripper" Style="{DynamicResource HorizontalThumb}" Height="8"/>
											</Track.Thumb>
										</Track>
									</Grid>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="{Binding Source={StaticResource DarkGray}}"/>
			<SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="{Binding Source={StaticResource Foreground1}}"/>
			<SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="{Binding Source={StaticResource Foreground1}}"/>
			<SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="Transparent"/>
			<SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
			<Style x:Key="ExpanderHeaderFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Border>
								<Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true" StrokeThickness="1"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False" Margin="0 0 15 0">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="19"/>
									</Grid.ColumnDefinitions>
									<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19" Grid.Column="1"/>
									<Path x:Name="arrow" Data="F1 M 3.52 7.2 C 3.626667 7.093334 3.766666 7.040001 3.94 7.04 C 4.113333 7.040001 4.266666 7.093334 4.4 7.2 L 10 12.8 L 15.599999 7.2 C 15.759998 7.040001 15.959998 6.986668 16.199999 7.04 C 16.439999 7.093334 16.593332 7.240001 16.66 7.48 C 16.726665 7.720001 16.666666 7.933334 16.48 8.12 L 10.44 14.16 C 10.306665 14.266666 10.16 14.32 10 14.32 C 9.84 14.32 9.693333 14.266666 9.559999 14.16 L 3.52 8.12 C 3.386667 7.986668 3.32 7.833334 3.32 7.66 C 3.32 7.486668 3.386667 7.333334 3.52 7.2 Z " HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="1" VerticalAlignment="Center" Grid.Column="1"/>
									<ContentPresenter Grid.Column="0" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="F1 M 3.52 13.12 C 3.626667 13.226667 3.766666 13.280001 3.94 13.280001 C 4.113333 13.280001 4.266666 13.226667 4.4 13.12 L 10 7.52 L 15.599999 13.12 C 15.759998 13.280001 15.959998 13.333334 16.199999 13.280001 C 16.439999 13.226666 16.593332 13.08 16.66 12.84 C 16.726665 12.6 16.666666 12.386667 16.48 12.2 L 10.44 6.16 C 10.306665 6.053333 10.16 6 10 6 C 9.84 6 9.693333 6.053333 9.559999 6.16 L 3.52 12.2 C 3.386667 12.333334 3.32 12.486668 3.32 12.66 C 3.32 12.833334 3.386667 12.986667 3.52 13.12 Z "/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="19"/>
										<ColumnDefinition Width="*"/>
									</Grid.ColumnDefinitions>
									<Grid>
										<Grid.LayoutTransform>
											<TransformGroup>
												<TransformGroup.Children>
													<TransformCollection>
														<RotateTransform Angle="180"/>
													</TransformCollection>
												</TransformGroup.Children>
											</TransformGroup>
										</Grid.LayoutTransform>
										<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
										<Path x:Name="arrow" Data="F1 M 3.52 7.2 C 3.626667 7.093334 3.766666 7.040001 3.94 7.04 C 4.113333 7.040001 4.266666 7.093334 4.4 7.2 L 10 12.8 L 15.599999 7.2 C 15.759998 7.040001 15.959998 6.986668 16.199999 7.04 C 16.439999 7.093334 16.593332 7.240001 16.66 7.48 C 16.726665 7.720001 16.666666 7.933334 16.48 8.12 L 10.44 14.16 C 10.306665 14.266666 10.16 14.32 10 14.32 C 9.84 14.32 9.693333 14.266666 9.559999 14.16 L 3.52 8.12 C 3.386667 7.986668 3.32 7.833334 3.32 7.66 C 3.32 7.486668 3.386667 7.333334 3.52 7.2 Z " HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
									</Grid>
									<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="F1 M 3.52 13.12 C 3.626667 13.226667 3.766666 13.280001 3.94 13.280001 C 4.113333 13.280001 4.266666 13.226667 4.4 13.12 L 10 7.52 L 15.599999 13.12 C 15.759998 13.280001 15.959998 13.333334 16.199999 13.280001 C 16.439999 13.226666 16.593332 13.08 16.66 12.84 C 16.726665 12.6 16.666666 12.386667 16.48 12.2 L 10.44 6.16 C 10.306665 6.053333 10.16 6 10 6 C 9.84 6 9.693333 6.053333 9.559999 6.16 L 3.52 12.2 C 3.386667 12.333334 3.32 12.486668 3.32 12.66 C 3.32 12.833334 3.386667 12.986667 3.52 13.12 Z "/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False">
									<Grid.RowDefinitions>
										<RowDefinition Height="19"/>
										<RowDefinition Height="*"/>
									</Grid.RowDefinitions>
									<Grid>
										<Grid.LayoutTransform>
											<TransformGroup>
												<TransformGroup.Children>
													<TransformCollection>
														<RotateTransform Angle="90"/>
													</TransformCollection>
												</TransformGroup.Children>
											</TransformGroup>
										</Grid.LayoutTransform>
										<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
										<Path x:Name="arrow" Data="F1 M 3.52 7.2 C 3.626667 7.093334 3.766666 7.040001 3.94 7.04 C 4.113333 7.040001 4.266666 7.093334 4.4 7.2 L 10 12.8 L 15.599999 7.2 C 15.759998 7.040001 15.959998 6.986668 16.199999 7.04 C 16.439999 7.093334 16.593332 7.240001 16.66 7.48 C 16.726665 7.720001 16.666666 7.933334 16.48 8.12 L 10.44 14.16 C 10.306665 14.266666 10.16 14.32 10 14.32 C 9.84 14.32 9.693333 14.266666 9.559999 14.16 L 3.52 8.12 C 3.386667 7.986668 3.32 7.833334 3.32 7.66 C 3.32 7.486668 3.386667 7.333334 3.52 7.2 Z " HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
									</Grid>
									<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="F1 M 3.52 13.12 C 3.626667 13.226667 3.766666 13.280001 3.94 13.280001 C 4.113333 13.280001 4.266666 13.226667 4.4 13.12 L 10 7.52 L 15.599999 13.12 C 15.759998 13.280001 15.959998 13.333334 16.199999 13.280001 C 16.439999 13.226666 16.593332 13.08 16.66 12.84 C 16.726665 12.6 16.666666 12.386667 16.48 12.2 L 10.44 6.16 C 10.306665 6.053333 10.16 6 10 6 C 9.84 6 9.693333 6.053333 9.559999 6.16 L 3.52 12.2 C 3.386667 12.333334 3.32 12.486668 3.32 12.66 C 3.32 12.833334 3.386667 12.986667 3.52 13.12 Z "/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False">
									<Grid.RowDefinitions>
										<RowDefinition Height="19"/>
										<RowDefinition Height="*"/>
									</Grid.RowDefinitions>
									<Grid>
										<Grid.LayoutTransform>
											<TransformGroup>
												<TransformGroup.Children>
													<TransformCollection>
														<RotateTransform Angle="-90"/>
													</TransformCollection>
												</TransformGroup.Children>
											</TransformGroup>
										</Grid.LayoutTransform>
										<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
										<Path x:Name="arrow" Data="F1 M 3.52 7.2 C 3.626667 7.093334 3.766666 7.040001 3.94 7.04 C 4.113333 7.040001 4.266666 7.093334 4.4 7.2 L 10 12.8 L 15.599999 7.2 C 15.759998 7.040001 15.959998 6.986668 16.199999 7.04 C 16.439999 7.093334 16.593332 7.240001 16.66 7.48 C 16.726665 7.720001 16.666666 7.933334 16.48 8.12 L 10.44 14.16 C 10.306665 14.266666 10.16 14.32 10 14.32 C 9.84 14.32 9.693333 14.266666 9.559999 14.16 L 3.52 8.12 C 3.386667 7.986668 3.32 7.833334 3.32 7.66 C 3.32 7.486668 3.386667 7.333334 3.52 7.2 Z " HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
									</Grid>
									<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="F1 M 3.52 13.12 C 3.626667 13.226667 3.766666 13.280001 3.94 13.280001 C 4.113333 13.280001 4.266666 13.226667 4.4 13.12 L 10 7.52 L 15.599999 13.12 C 15.759998 13.280001 15.959998 13.333334 16.199999 13.280001 C 16.439999 13.226666 16.593332 13.08 16.66 12.84 C 16.726665 12.6 16.666666 12.386667 16.48 12.2 L 10.44 6.16 C 10.306665 6.053333 10.16 6 10 6 C 9.84 6 9.693333 6.053333 9.559999 6.16 L 3.52 12.2 C 3.386667 12.333334 3.32 12.486668 3.32 12.66 C 3.32 12.833334 3.386667 12.986667 3.52 13.12 Z "/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
				<Setter Property="VerticalContentAlignment" Value="Stretch"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Expander}">
							<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="6" SnapsToDevicePixels="true">
								<DockPanel>
									<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
									<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
								</DockPanel>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="true">
									<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Right">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Up">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Left">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="AllowDrop" Value="true"/>
				<Setter Property="MinWidth" Value="0"/>
				<Setter Property="MinHeight" Value="0"/>
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="Transparent" Offset="0.0"/>
				<GradientStop Color="Transparent" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="ComboBox.Static.Border" Color="#2153E0"/>
			<SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#2153E0"/>
			<SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
			<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
			<SolidColorBrush x:Key="TextBox.Static.Background" Color="Transparent"/>
			<LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#2153E0" Offset="0.0"/>
				<GradientStop Color="#2153E0" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#2153E0"/>
			<SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#fff"/>
			<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#2153E0"/>
			<LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#2153E0" Offset="0.0"/>
				<GradientStop Color="#2153E0" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#2153E0"/>
			<LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#2153E0" Offset="0.0"/>
				<GradientStop Color="#2153E0" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#2153E0"/>
			<SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#fff"/>
			<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#2153E0"/>
			<LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#2153E0" Offset="0.0"/>
				<GradientStop Color="#2153E0" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#2153E0"/>
			<SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
			<SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
			<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
			<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
			<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
			<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Focusable" Value="false"/>
				<Setter Property="ClickMode" Value="Press"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}" CornerRadius="4" SnapsToDevicePixels="true">
								<Border x:Name="splitBorder" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
									<Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
								</MultiDataTrigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
								</MultiDataTrigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
								</MultiDataTrigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
								</MultiDataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
				<Grid Background="{TemplateBinding Background}" x:Name="templateRoot" SnapsToDevicePixels="true">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
					</Grid.ColumnDefinitions>
					<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
						<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
							<Border x:Name="dropDownBorder" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" Background="{Binding Source={StaticResource Background1}}">
								<ScrollViewer x:Name="DropDownScrollViewer">
									<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
										<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
											<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
										</Canvas>
										<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</Grid>
								</ScrollViewer>
							</Border>
						</theme:SystemDropShadowChrome>
					</Popup>
					<ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
					<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
						<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
						<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
					</Trigger>
					<Trigger Property="HasItems" Value="false">
						<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true"/>
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
					</MultiTrigger>
					<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
						<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
						<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
				<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
					</Grid.ColumnDefinitions>
					<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
						<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
							<Border x:Name="dropDownBorder" Background="{Binding Source={StaticResource Background1}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
								<ScrollViewer x:Name="DropDownScrollViewer">
									<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
										<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
											<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
										</Canvas>
										<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</Grid>
								</ScrollViewer>
							</Border>
						</theme:SystemDropShadowChrome>
					</Popup>
					<ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
					<Border x:Name="border" Background="Transparent" Margin="{TemplateBinding BorderThickness}">
						<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Opacity" TargetName="border" Value="0.56"/>
					</Trigger>
					<Trigger Property="IsKeyboardFocusWithin" Value="true">
						<Setter Property="Foreground" Value="Black"/>
					</Trigger>
					<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
						<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
						<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
					</Trigger>
					<Trigger Property="HasItems" Value="false">
						<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true"/>
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
					</MultiTrigger>
					<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
						<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
						<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="{Binding Source={StaticResource AccentColor}}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
				<Setter Property="Padding" Value="6,3,5,3"/>
				<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
				<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
				<Style.Triggers>
					<Trigger Property="IsEditable" Value="true">
						<Setter Property="IsTabStop" Value="false"/>
						<Setter Property="Padding" Value="2"/>
						<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
					</Trigger>

					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Foreground" Value="#fff"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="FocusVisual1">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
			<SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
			<SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="White"/>
			<SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#1942B3"/>
			<SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="White"/>
			<SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="Transparent"/>
			<SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#1942B3"/>
			<SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="WhiteSmoke"/>
			<SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
			<SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
			<SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
			<Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual1}"/>
				<Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
				<Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Border x:Name="checkBoxBorder" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Height="20" Width="20" BorderBrush="#2153E0">
									<Grid x:Name="markGrid">
										<Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center"/>
										<Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
									</Grid>
								</Border>
								<ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="HasContent" Value="true">
									
									<Setter Property="Padding" Value="4,-1,0,0"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Opacity" TargetName="optionMark" Value="1"/>
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
									<Setter Property="Background" TargetName="checkBoxBorder" Value="#2153E0"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter Property="Opacity" TargetName="optionMark" Value="0"/>
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Static.Background}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
			<SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/>
			<SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>
			<SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="{Binding Source={StaticResource Background1}}"/>
			<SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="{Binding Source={StaticResource AccentColor}}"/>
			<SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="{Binding Source={StaticResource AccentColor}}"/>
			<SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="{Binding Source={StaticResource Background1}}"/>
			<SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="{Binding Source={StaticResource AccentColor}}"/>
			<SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="{Binding Source={StaticResource AccentColor}}"/>
			<SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
			<SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
			<SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
			<Style x:Key="RadioButtonStyle1" TargetType="{x:Type RadioButton}">
				<Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
				<Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RadioButton}">
							<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<Grid x:Name="markGrid" Margin="2">
										<Ellipse x:Name="optionMark" Fill="{Binding Source={StaticResource AccentColor}}" MinHeight="6" MinWidth="6" Opacity="0"/>
									</Grid>
								</Border>
								<ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="HasContent" Value="true">
									<Setter Property="Padding" Value="4,-1,0,0"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Opacity" TargetName="optionMark" Value="1"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="DatePickerStyle" TargetType="{x:Type DatePicker}">
				<Setter Property="IsTodayHighlighted" Value="True"/>
				<Setter Property="SelectedDateFormat" Value="Short"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="Padding" Value="2"/>
				<Setter Property="BorderBrush" Value="{x:Null}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DatePicker}">
							<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2" Padding="{TemplateBinding Padding}" CornerRadius="5,5,5,5">
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal"/>
										<VisualState x:Name="Disabled">
											<Storyboard>
												<DoubleAnimation Duration="0" Storyboard.TargetName="PART_DisabledVisual" To="1" Storyboard.TargetProperty="Opacity"/>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<Grid.Resources>
										<SolidColorBrush x:Key="DisabledBrush" Color="Transparent"/>
										<ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
											<Grid>
												<VisualStateManager.VisualStateGroups>
													<VisualStateGroup x:Name="CommonStates">
														<VisualStateGroup.Transitions>
															<VisualTransition GeneratedDuration="0"/>
															<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
															<VisualTransition GeneratedDuration="0:0:0.1" To="Pressed"/>
														</VisualStateGroup.Transitions>
														<VisualState x:Name="Normal"/>
														<VisualState x:Name="MouseOver">

														</VisualState>
														<VisualState x:Name="Pressed">

														</VisualState>
														<VisualState x:Name="Disabled"/>
													</VisualStateGroup>
												</VisualStateManager.VisualStateGroups>
												<Grid FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0" VerticalAlignment="Center" Width="19">
													<TextBlock FontFamily="/Fonts/#FluentSystemIcons-Regular" Text="&#xF22B;" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{Binding Source={StaticResource AccentColor}}" FontSize="18"/>
												</Grid>
											</Grid>
										</ControlTemplate>
									</Grid.Resources>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="Auto"/>
									</Grid.ColumnDefinitions>
									<Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Left" Margin="3,0,3,0" Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}" VerticalAlignment="Top" Width="20" Background="{x:Null}"/>
									<DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="Stretch" Grid.Row="0" VerticalContentAlignment="Stretch" Background="{x:Null}" BorderThickness="0" Foreground="{Binding Source={StaticResource Foreground1}}" SelectionTextBrush="{x:Null}"/>
									<Grid x:Name="PART_DisabledVisual" Grid.Column="0" Grid.ColumnSpan="2" IsHitTestVisible="False" Opacity="0" Grid.Row="0">

										<Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
									</Grid>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
									<Setter Property="Foreground" TargetName="PART_TextBox" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
								</DataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Application.Resources>
</Application>
